0. 概述
    1. Java类可被认为是一种自定义的数据类型, 可以使用类定义变量, 所有使用类定义的变量都是引用变量,它
        们将会引用到类的对象;
    2. 面向对象三大特征: 封装, 继承, 多态

1. 类和对象
    1.1 定义类
        说明:
            面向对象程序设计过程中有两重要概念: 类(class)和对象(object, 也被称为实例, instance), 其中
            类是某一批对象的抽象, 也可以将类理解为某一种概念; 对象才是一个具体存在的实体.
        
        类的作用:
            1. 定义变量 
            2. 创建对象
            3. 调用类的类方法或访问类的类变量
            4. 派生子类
            
        定义类的语法:
            [修饰符] class 类名
            {
                成员变量 (field)
                方法(method)
                构造器(constructor)
                内部类(nested class)
                初始化模块
            }
            
            语法说明:
                1. 修饰符: 可以是 public, final | abstract("|"表示互斥), 或者完全可以省略, 
                2. 类名: 一个合法的标识符(字母,数字,下划线,$, 组成, 但是数字不能开头, 也不要用($)开头),
                        由有意义的单词组成, 每个单词首字母大写, 其他字母小写, 单词之间不要有分隔符
                3. 一个类最常见的成员: 构造器,成员变量,方法. 这三种都可以是零个或多个,如果零个,表示空类.
                4. static 修饰的成员不能访问没有 static 修饰的成员
                5. 花括号"{", "}" 之间的部分叫做" 类体 "
            
        成员变量(field):
            用于定义该类或该类的实例所包含的状态数据, 
            
            定义语法:
                [修饰符] 类型 成员变量名 [=默认值;]
            
            语法说明:
                1. 修饰符: private | protected | public, final, static, (transient: 序列化相关)
                2. 类型: 任意基本类型或者引用类型
                3. 变量名: 驼峰命名法, 首字母小写 后面每个单词首字母大写, 尽量使用与项目相关的描述性
                           的名词
                4. static修饰成员变量表明它属于这个类本身, 而不属于该类的单个实例, 所以static修饰的
                    变量叫做 类变量, 通常把不适用static修饰的成员变量也叫做实例变量, 实例方法.
                    
        方法:
            用于定义该类或该例的实例的行为特征或者功能实现,
            
            定义语法:
                [修饰符] 方法返回值类型 方法名(形参列表)
                {
                    // 代码: 由零条或者多条可执行语句组成的方法体
                    // 代码: 定义变量(包括数组), 变量赋值, 流程控制, 数据语句 

                    // 如果声明了返回值类型， 必须有return语句
                }
            
            语法说明:
                1. 修饰符:  private | protected | public, final | abstract, static, 
                2. 方法返回值类型: 可以是任意基本类型或引用类型, 可使用 void 声明没有返回值
                3. 方法名: 驼峰写法, 通常使用与项目相关的动词
                4. 形参列表: 定义该方法可以接受的参数, 可有零组或多组"参数类型 形参名" 组合而成, 多组
                             参数之间用(,) 隔开, 例如： 形参类型1 形参名1, 形参类型2 形参名2, ...
                5. 方法体中多条可执行语句之间有严格的执行顺序, 排在方法体前面的语句总是先执行, 排在
                    方法体后面的语句总是后执行
                6.  花括号"{", "}" 之间的部分叫做" 方法体 "
            
        构造器:
            构造器是一个类创建对象的根本途径, 如果一个类没有构造器, 这个类通常无法创建实例, new 调用
            构造器创建对象
            
            定义语法:
                [修饰符] 构造器名(形参列表)
                {
                    // 代码: 定义变量(包括数组), 变量赋值, 流程控制, 数据语句 
                }
            语法说明:
                1. 修饰符: private | protected | public 其中之一
                2. 构造器名: 构造器名必须和类名相同
                3. 和定义方法形参列表的格式完全相同
                4. 注意: 构造器既不能定义返回值类型, 也不能使用void声明构造器没有返回值
                5. 定义类的代码没有定义构造器, 系统将为它提供一个默认的构造器, 系统提供的构造器总是
                    没有参数的

        例子: 定义一个Person类
            public class Person
            {
                // 定义两个成员变量
                public String name;
                public int age;

                // 定义一个say方法
                public void say(String content)
                {
                    System.out.println(content);
                }
            }
        
    1.2 对象的产生和作用
        说明:
            创建对象的根本途径是构造器, 通过 new 关键字来调用某个类的构造器即可创建这个类的实例           
        
        Java对象的作用:
            1. 访问对象的实例变量
            2. 调用对象的方法           
        
        类或实例访问方法或成员变量的语法:
            1.  类.类变量|方法
            2.  实例.实例变量|方法
            3. static 修饰的方法或成员变量, 既可通过类来调用, 也可通过实例来; 没有 static 修饰的
                普通方法和成员变量, 只能用过实例来调用
        
        例子:
            // 使用上面定义的 Person 类来定义一个 Person 类型的变量
            Person p;
            // 通过 new 关键字调用 Person 类的构造器, 返回一个 Person 实例
            // 将该 Person 实例赋给P变量
            p = new Person();
            
            // 上面你的代码也可以简化; 定义P变量的同时并为p变量赋值
            // Person p = new Person();
            p.name = "jefxff";
            p.age = 19;
            p.Say("Java is so hard! But I can do it!")

            
            
            
            









































            