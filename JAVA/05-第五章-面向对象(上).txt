0. 概述
    1. Java类可被认为是一种自定义的数据类型, 可以使用类定义变量, 所有使用类定义的变量都是引用变量,它
        们将会引用到类的对象;
    2. 面向对象三大特征: 封装, 继承, 多态

1. 类和对象
    1.1 定义类
        说明:
            面向对象程序设计过程中有两重要概念: 类(class)和对象(object, 也被称为实例, instance), 其中
            类是某一批对象的抽象, 也可以将类理解为某一种概念; 对象才是一个具体存在的实体.
        
        类的作用:
            1. 定义变量 
            2. 创建对象
            3. 调用类的类方法或访问类的类变量
            4. 派生子类
            
        定义类的语法:
            [修饰符] class 类名
            {
                成员变量 (field)
                方法(method)
                构造器(constructor)
                内部类(nested class)
                初始化模块
            }
            
            语法说明:
                1. 修饰符: 可以是 public, final | abstract("|"表示互斥), 或者完全可以省略, 
                2. 类名: 一个合法的标识符(字母,数字,下划线,$, 组成, 但是数字不能开头, 也不要用($)开头),
                        由有意义的单词组成, 每个单词首字母大写, 其他字母小写, 单词之间不要有分隔符
                3. 一个类最常见的成员: 构造器,成员变量,方法. 这三种都可以是零个或多个,如果零个,表示空类.
                4. static 修饰的成员不能访问没有 static 修饰的成员
                5. 花括号"{", "}" 之间的部分叫做" 类体 "
            
        成员变量(field):
            用于定义该类或该类的实例所包含的状态数据, 
            
            定义语法:
                [修饰符] 类型 成员变量名 [=默认值;]
            
            语法说明:
                1. 修饰符: private | protected | public, final, static, (transient: 序列化相关)
                2. 类型: 任意基本类型或者引用类型
                3. 变量名: 驼峰命名法, 首字母小写 后面每个单词首字母大写, 尽量使用与项目相关的描述性
                           的名词
                4. static修饰成员变量表明它属于这个类本身, 而不属于该类的单个实例, 所以static修饰的
                    变量叫做 类变量, 通常把不适用static修饰的成员变量也叫做实例变量, 实例方法.
                    
        方法(method):
            用于定义该类或该例的实例的行为特征或者功能实现,
            
            定义语法:
                [修饰符] 方法返回值类型 方法名(形参列表)
                {
                    // 代码: 由零条或者多条可执行语句组成的方法体
                    // 代码: 定义变量(包括数组), 变量赋值, 流程控制, 数据语句 

                    // 如果声明了返回值类型， 必须有return语句
                }
            
            语法说明:
                1. 修饰符:  private | protected | public, final | abstract, static, 
                2. 方法返回值类型: 可以是任意基本类型或引用类型, 可使用 void 声明没有返回值
                3. 方法名: 驼峰写法, 通常使用与项目相关的动词
                4. 形参列表: 定义该方法可以接受的参数, 可有零组或多组"参数类型 形参名" 组合而成, 多组
                             参数之间用(,) 隔开, 例如： 形参类型1 形参名1, 形参类型2 形参名2, ...
                5. 方法体中多条可执行语句之间有严格的执行顺序, 排在方法体前面的语句总是先执行, 排在
                    方法体后面的语句总是后执行
                6.  花括号"{", "}" 之间的部分叫做" 方法体 "
            
        构造器:
            构造器是一个类创建对象的根本途径, 如果一个类没有构造器, 这个类通常无法创建实例, new 调用
            构造器创建对象
            
            定义语法:
                [修饰符] 构造器名(形参列表)
                {
                    // 代码: 定义变量(包括数组), 变量赋值, 流程控制, 数据语句 
                }
            语法说明:
                1. 修饰符: private | protected | public 其中之一
                2. 构造器名: 构造器名必须和类名相同
                3. 和定义方法形参列表的格式完全相同
                4. 注意: 构造器既不能定义返回值类型, 也不能使用void声明构造器没有返回值
                5. 定义类的代码没有定义构造器, 系统将为它提供一个默认的构造器, 系统提供的构造器总是
                    没有参数的

        例子: 定义一个Person类
            public class Person
            {
                // 定义两个成员变量
                public String name;
                public int age;

                // 定义一个say方法
                public void say(String content)
                {
                    System.out.println(content);
                }
            }
        
        
    1.2 对象的产生和作用
        说明:
            创建对象的根本途径是构造器, 通过 new 关键字来调用某个类的构造器即可创建这个类的实例           
        
        Java对象的作用:
            1. 访问对象的实例变量
            2. 调用对象的方法           
        
        类或实例访问方法或成员变量的语法:
            1.  类.类变量|方法
            2.  实例.实例变量|方法
            3.  static 修饰的方法或成员变量, 既可通过类来调用, 也可通过实例来; 没有 static 修饰的
                普通方法和成员变量, 只能用过实例来调用
        
        例子:
            // 使用上面定义的 Person 类来定义一个 Person 类型的变量
            Person p;
            // 通过 new 关键字调用 Person 类的构造器, 返回一个 Person 实例
            // 将该 Person 实例赋给P变量
            p = new Person();
            
            // 上面你的代码也可以简化; 定义P变量的同时并为p变量赋值
            // Person p = new Person();
            // 访问p的name和age实例变量, 直接为该变量赋值
            p.name = "jefxff";
            p.age = 19;
            // 调用p的say()方法, 声明 say() 方法的时定义一个形参
            // 调用该方法必须为形参指定一个定义时声明类型的值
            p.Say("Java is so hard! But I can do it!")
            // 直接输出 p 的 name 实例变量
            System.out.println(p.name);


    1.3 对象, 引用和指针
        说明:
            1. 结合上面你的Java代码的例子,  代码: Person p = new Person(); 这行代码创建了一个 Person
               实例, 也被称之为Person对象;这行代码实际产生了两个东西:一个是p变量, 一个是Person对象. 这个Person对象被赋给p变量. 
            2. 类也是一种引用类型, 因此程序中定义的Person类型的变量实际上是一个引用, 他被存放在栈内
               存中, 指向实际的Person对象; 而真正的Person对象则存放在堆(heap)内存中. 
            3. 不管是数组还是对象,当程序访问引用变量的成员变量或方法时, 实际上是访问该引用变量所引用
               的数组, 对象的成员变量或方法
            4. 栈内存里面的引用变量并未真正存储对象的成员变量, 对象的成员变量数据实际上存放在堆内存里,
               而引用变量只是指向该堆内存里面的对象.
            5. 所以, 引用变量与 C 语言里的指针很像, 他们都是存储一个地址值, 通过这个地址来引用到实际
               对象, 只是 Java 对这个指针进行了封装,
            6. 堆内存里的对象可以有多个引用, 即多个引用变量指向同一个对象, 代码: Person p2 = p; 这行 
               代码把p变量的值赋值给 p2 变量, 也就是将 p 变量保存的地址值赋给 p2 变量, 这样 p2 变量 
               和 p 变量将指向堆内存里的同一个 Person 对象,  所以不管访问 p 变量还是访问 p2 变量的
               成员变量和方法, 他们实际上是访问同一个 Person 对象的成员变量和方法, 将会返回相同的结果

    1.4 对象的 this 引用
        说明:
            1. this 关键字总是指向调用该方法的对象.根据this出现位置, 有2, 3两种情形
                出现在构造器中, this 就代表该构造器正在初始化的对象;
                出现在非static方法中, this就代表了该方法的拥有者;
            2. this关键字最大的作用就是让类中一个方法, 访问该类里的另一个方法或实例变量
            3. 谁在调用这个方法, this就代表谁
            4. this. 的很重要的作用是: 用于区分方法或构造器的局部变量. 尤其是与成员变量同名时--更需
                要this进行区分
            5. 如果在 static 修饰的方法中使用this关键字, 则这个关键字就无法指向合适的对象, 所以 static 
                修饰的方法不能使用this引用. 因此 static 修饰的方法不能访问不使用static修饰的普通成
                员, 所以: 静态成员不能直接访问非静态成员.

        例子: 1. 没有使用this的情况下, 下面例子调用内部方法需要创建两个实例来实现
            public class Dog
            {
                // 定义一个jump 方法
                public void jump()
                {
                    System.out.println("正在执行 jump 方法.....");
                }
                // 定义一个 run() 方法, run()方法需要借助 jump() 方法
                public void run()
                {
                    Dog d = new Dog();
                    d.jump();
                    
                    System.out.println("正在执行 run 方法.....");
                }
                public static void main(String[] args)
                {
                    // 创建 dog 对象
                    Dog dog = new Dog();
                    // 调用 Dog 对象的 run() 方法
                    dog.run();
                }
            }
            
            说明: 1. 上面的程序中一共产生了Dog 对象, 调用run() 方法的是 dog , 而在 run() 方法中调
                        用jump() 方法的是 d 
                  2. 再记一遍, **没有 static** 修饰的成员变量和方法都必须使用**对象**来调用
                  3. static 修饰的方法属于类, 不属于对象
                
        例子: 2. 使用this方法, 代码同上面例子1, 但是只需要创建一个实例
            public class Dog
            {
                // 定义一个jump 方法
                public void jump()
                {
                    System.out.println("正在执行 jump 方法.....");
                }
                // 定义一个 run() 方法, run()方法需要借助 jump() 方法
                public void run()
                {
                    // 谁调用这个方法, this就代表谁
                    this.jump();
                    // 这是一种省略 this 的写法, 但是我属于刚开始, 就不要省略了
                    // jump();
                    
                    System.out.println("正在执行 run 方法.....");
                }
                public static void main(String[] args)
                {
                    // 创建 dog 对象
                    Dog dog = new Dog();
                    // 调用 Dog 对象的 run() 方法
                    dog.run();
                }
            }
        
        例子: 3. this 在构造器中, 代表构造器正在初始化的对象; 也可以区分成员变量和局部变量
        public class ThisInConstructor
        {
            // 定义一个名为foo的成员变量
            public int foo;
            
            // 定义构造器
            public ThisInConstructor()
            {
                // 在构造器里面定义一个和成员变量同名的 foo 变量
                int foo = 0;
                // 使用this代表该构造器正在初始化的对象
                // 下面的代码将会把该构造器正在初始化的对象的foo成员变量设为 6
                this.foo = 6;
                
            }
            public static void main(String[] args)
            {
                //所有使用 ThisInConstructor 创建的对象的foo 成员变量都将被设为6
                System.out.println(new ThisInConstructor().foo);   // out: 6
                
                // 创建对象, 使用对象输出 foo 
                ThisInConstructor t = new ThisInConstructor();
                System.out.println(t.foo);   // out: 6
            }
        }


2. 方法详解
    2.1 方法的所属性
        说明:
            1. 方法是类或者对象的行为特征的抽象, 方法是类或对象的最重要组成部分;
            2. Java里面的方法不能独立存在, 所有的方法都必须定义在类里面; 方法在逻辑上要么属于类, 要
                么属于该类的一个对象;
            3. Java中, 类是一等公民, 整个系统有一个个的类组成, 一旦将一个方法定义在某个类体里面, 如
                果这个方法使用了static修饰, 则这个方法属于这个类, 否则这个方法属于这个类的实例;
            4. Java中执行方法时必须使用类或者对象来作为调用者, 即所有的方法都必须使用"类.方法" 或者
                使用"对象.方法" 的形式来调用;
            5. 同一个类的一个方法调用另外一个方法: 如果调用的是普通方法, 则默认使用 this 作为调用者, 
                如果被调用的方法是静态方法, 则默认使用类作为调用者. 
            6. 记住: 注意: 使用static修饰的方法既可以使用类作为调用者来调用, 也可以使用对象作为调用
                者来调用;  非 static 方法则属于该类的对象, 不属于类本身, 所以 非static方法只能使用对
                象来调用.

    2.2 方法的参数传递机制
        





























            