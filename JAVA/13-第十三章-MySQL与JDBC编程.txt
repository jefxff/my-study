MySQL 数据库与 JDBC 编程


1. JDBC 基础

1.1 JDBC 简介

    1. JDBC 就是 Java Database Connectivity 即 Java 数据库连接, 是用来执行 SQL 语句的 Java API
    2. JDBC 的优势就是跨平台, 跨应用; 实现同一种 API 可以访问不同平台不同的数据库系统
    3. JDBC 的功能就是,连接数据库, 执行SQL语句, 返回SQL语句执行结果

1.2 JDBC 驱动程序

    1. 数据库驱动程序
        数据库驱动程序就是JDBC和数据库之间的转换层, 负责将JDBC调用映射成数据库调用

    2. JDBC 4种驱动:
        1. JDBC-ODBC驱动: Java8已删除, 原因是不适合并发使用, 性能和扩展能力不强
        2. 直接将JDBC API 映射成数据库特定的客户端API; 包含特定数据库的本地代码, 用户访问特定数据库客户端;
            (这种驱动性能好, 但是代价就是增加了代码量被维护的难度)
        3. 支持三层结构的 JDBC 访问方式, 主要用于 Applet 阶段, 通过 Applet 访问数据库
        4. 纯Java的, 直接与数据库实例交互, 这种驱动知道数据库底层协议(这种驱动避开了本地代码, 减少开发复杂
            性, 以及出错的可能)


2. SQL 语法

2.1 安装数据库

    1. Windows 下安装MySQL数据库需要注意点:
        1. 需要先安装 vcredist_x86.exe 这个程序, 似乎默认安装在了C盘下
        2. 在 MySQL 安装的目录下 新建 my.ini 
        3. 创建 MySQL 环境变量以及添加MySQL_path变量
        4. 以管理员运行 CMD, 执行 mysqld -install
        5. 执行初始化获取登陆密码: mysqld  --initialize 
            密码在 目录下data文件夹以*.err结尾的文件中
        6. 以获取的密码登录MySQL, 重置密码
            ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码';
        7. 重置MySQL服务

2.2 关系数据库基本概念及MySQL基本命令

    1. 关系型数据库
        1. 了解DBMS: DBMS 是 Database Management System 数据库管理系统的简称; 它负责管理数据的存储, 安全, 一致性
            并发, 恢复和访问等操作

    2. 几种类型的数据库系统
        1. 网状型数据库
        2. 层次性数据库
        3. 关系型数据库
        4. 面向对象数据库

    3. Mysql 数据库两种存储机制
        1. MyISAM: 这是MySQL早期默认的存储机制, 对事务支持不够好
        2. InnoDB: 提供事务安全的存储机制, 通过建立行级锁来保证事务完整性, 以共享锁来处理Senlect语句
        3. 建表时指定存储机制:
            ENGINE=MyISAM  强制使用 MyISAM 存储机制
            ENGINE=InnoDB  强制使用 InnoDB 存储机制
    
2.3 SQL 语句基础
    
    1. SQL语句的功能:
        1. 在数据库中检索信息
        2. 对数据库的信息进行更新
        3. 改变数据库的结构
        4. 更改系统的安全设置
        5. 增加或回收用户对数据库, 表的许可权限
    
    2. 标准SQL语句的类型
        1. 查询语句：主要由 select 关键字完成
        2. DML (Data Manipulation Language, 数据操作语言) 语句: 主要由 insert, update, delete 关键字完成
        3. DDL (Data Definition Lanaguage, 数据定义语言) 语句: 主要由 create, alter, drop, truncate 关键字完成
        4. DCL (Data Control Lanaguage, 数据控制语言) 语句: 主要由 grant 和 revoke 关键字完成; 通常用于为数据库
            用户授权, 或者收回指定用户的权限
        5. 事务控制语句: 主要由 commit, rollback, savepoint 关键字完成 

    3. SQL 命令标识符命名规则:
        1. 标识符通常必须以字母开头
        2. 标识符包括字母, 数字和三个特殊字符(#_$)
        3. 不要使用关键字, 保留字, 多个单词连缀组成, 单词之间以_隔开


2.4 DDL 语句

    1. 常见的书数据库对象
        对象名称        对应关键字         描述
        表              table           表是数据存储的逻辑单元, 以行和列的行时存在; 列就是字段, 行就是记录
        数据字典                         就是系统表, 存放数据库相关信息的表; 系统表里的数据通常由数据库系统维护, 不可轻易修改
        约束            constraint      执行数据校验的规则, 用于保证数据完整性的规则
        视图            view            一个或多个数据表里数据的逻辑显式, 视图并不存储数据
        索引            index           用于提高查询性能, 相当于书的目录
        函数            function        用于完成一次特定的计算, 具有一个返回值
        存储过程        procedure        用于完成一次完整的业务处理, 没有返回值, 但可通过传出参数将多个值传给调用环境
        触发器          tigger           相当于一个事件监听器, 当数据库发生特定事件后, 触发器被触发, 完成相应处理

    2. Mysql 支持的列类型
        列类型                              说明
        tinyint/smallint/mediumint/         1字节/2字节/3字节/4字节/8字节整数, 又可分为有符号和无符号两种, 这些整数类型的区别仅仅是表数范围不同
            int(integer)/bigint
        float/double                        单精度, 双精度浮点类型
        decima(dec)                         精确小数类型, 相当于 float 和 double 不会产生精度丢失的问题
        date                                日期类型, 不能保存时间, 把java.util.Date 对象保存进date列时, 时间部分会丢失
        time                                时间类型, 不能保存日期, 把java.util.Date 对象保存进time列时, 日期部分会丢失
        datetime                            日期, 时间类型
        timestamp                           时间戳类型
        year                                年类型, 仅仅保存时间的年份
        char                                定长字符串类型
        varchar                             可变长度的字符串类型
        binary                              定长二进制字符串类型,它以二进制形式保存字符串
        varbinary                           可变长度的二进制字符串类型, 它以二进制的形式保存字符串
        tinblob/blob/mediublob              1字节/2字节/3字节/4字节的二进制大对象, 可用于存储图片, 音乐等二进制数据; 分别可存储
            longblob                            255B/64KB/16MB/4GB大小
        tinytext/text/mediutext             1字节/2字节/3字节/4字节的文本对象, 可用于存储超长长度的字符串, 分别存储:
            longtext                            255B/64KB/16MB/4GB大小的文本
        enum('value1','value2',...)         枚举类型, 该列的值只能是enum后括号里多个值的其中之一
        set('value1','value2',...)          集合类型, 该列的值只能是set后括号里多个值的其中几个

    3. 创建表语法
        create table [模式名.]表名 (
            // 可以有多个列定义
            columnName1 datatype [default expr],
            ...,
            ...
        );    

        例子:
            create table test (
                # 整数通常用 int
                test_id int,
                # 小数点位
                test_price decimal,
                # 普通长度文本, 使用default指定默认值
                test_name varchar(255) default 'XXX',
                # 大文本类型
                test_desc text,
                # 图片
                test_img blob,
                test_date datetime
            );

        # 子查询建表
        create table [模式名.]表名 [column[, column...]]
        as subquaey;

        例子: 
            # 创建hehe数据表, 该数据表和test完全相同, 数据也相同
            create table hehe
            as 
            select * from test;
            
    4. 修改表结构语法

        增加列定义的语法: (新增的列名必须是原表中不存在的)
            alter table 表名
            add(
                # 可以有多个列定义
                column_name1 datatype [default expr],
                ...
            );

            例子:
                #为hehe数据表增加一个hehe_id字段, 该字段的类型为int
                alter table hehe
                add hehe_id int;
                # 为hehe数据表增加aaa,bbb字段, 两个字段的类型都为varchar(255)
                alter table hehe
                add(
                    aaa varchar(255) defaule 'xxx',
                    bbb varchar(255)
                );

        修改列定义的语法: (修改的列名必须是原表中存在的)
            alter table 表名
            modify column_name datatype [default expr] [first | after column_name];

            例子:
                # 将hehe表的hehe_id列修改为varchar(255)类型
                alter table hehe 
                modify hehe_id varchar(255);
                # 将hehe表的bbb列修改成 int 类型
                alter table hehe
                modify bbb int;
        
        从数据表删除列语法:
            alter table 表名
            drop column_name;

            例子:
                #删除hehe的aaa字段
                alter table hehe
                drop aaa;

        重命名数据表语法:
            alter table 表名
            rename to 新表名;

            例子:
                alter table hehe
                rename to wawa;

        改变列名语法:
            alter table 表名
            change old_column_name new_column_name type [default expr] [first | after column_name];

            例子:
                alter table wawa
                change bbb ddd int;
    
    5. 删除表的语法

        语法:
            drop table 表名;

            例子:
                drop table wawaha;    
        
        删除表的效果:
            1. 表结构被删除, 表对象不再存在
            2. 表里的所有数据也被删除
            3. 该表所有相关的索引, 约束也被删除

    6. truncate 表

        truncate 表的作用是一次性删除整个表里的全部数据, 但保留表结构

        语法:
            truncate 表名;


2.5 数据库约束

    通过约束可以更好地保证数据表里数据的完整性, 约束是再表上强制执行数据校验规则, 约束主要用于保证数据库里数据表的
        完整性, 另外, 当表中数据存在相互依赖性时, 可以保护相关的数据不被删除
    
    数据库5种完整性约束:
        1. NOT NULL  非空约束, 指定某列不能为空
        2. UNIQUE    唯一约束, 指定某列或者几列组合不能重复
        3. PRIMARY KEY    主键, 指定该列的值可以唯一第标识该条记录
        4. FOREIGN KEY    外键, 指定改行记录从属于主表中的一条记录, 主要用于保证参照完整性
        ※ 5. CHECK     检查, 指定一个布尔表达式, 用于指定对应列的值必须满足该表达式  MySQL 不支持这一条

    约束分类:
        1. 单列约束: 每个约束之约束一列
        2. 多列约束: 每个约束可以约束多个数据列
    
    为数据表指定约束的两个时机:
        1. 建表的同时为相应的数据列指定约束
        2. 建表之后, 以修改的方式来增加约束

    NOT NULL 约束:
        1. 非空约束用于确保列不允许为空, 只能作为列级约束, 只能使用列级约束语法, SQL中null不区分大小写
        2. 所有的数据类型的时都可以是null, 包括 int, float, boolean 等数据类型
        3. 空字符串不等于 null, 0 也不等于 null 

        例子:
            # 建表时指定列非空
            create table hehe1 (
                # 建立非空约束, 这意味着hehe_id 不可以为 null 
                hehe_id int not null,
                # MySQL 的非空约束不能指定名字
                hehe_name varchar(255) default 'xyz' not null,
                # 下面的列可以为空, 默认就可以为空
                hehe_gender varchar(2) null
            );

            # 修改表示增加或删除非空约束
            #增加约束
            alter table hehe1
            modify hehe_gender varchar(2) not null;
            #取消约束
            alter table hehe1
            modify hehe_name varchar(2) nll;
            #取消非空约束, 指定默认值
            alter table hehe1
            modify hehe_name varchar(255) default 'abc' null;

    UNIQUE 约束:
        1. 唯一约束用于保证指定列或指定列组合不允许出现重复值(但可以出现多个null值),
        2. 同一个表可建立多个唯一约束, 唯一约束也可以由多列组合而成, 唯一约束既可以使用列级约束, 也可以使用
            表级约束语法建立
        3. 表级约束语法: [constraint 约束名] 约束定义
        4. 删除约束: drop index 约束名;

        例子:
            # 建表时创建唯一约束, 使用列级约束语法建立约束
            create table unique_test (
                # 建立了非空约束,这意味着test_id不可以为null
                test_id int not null,
                # unique就是唯一约束, 使用列级约束语法建立唯一约束
                test_name varchar(255) UNIQUE
            );

            # 建表时创建唯一约束, 使用表级约束语法建立约束
            # test_name 和 test_pass 都是唯一约束, 他们都不可以重复
            create table unique_test2 (
                # 建立了非空约束,这意味着test_id不可以为null
                test_id int not null,
                test_name varchar(255),
                test_pass varchar(255),
                # 使用表记约束语法建立唯一约束
                unique (test_name),
                # 使用表级约束语法建立唯一约束, 而且指定约束名
                constraint test2_uk unique (test_pass)
            );

            # 建表时创建唯一约束, 使用表级约束语法建立约束
            # test_name 和 test_pass 的组合是唯一约束, 他们的组合不可以重复
            create table unique_test3 (
                # 建立了非空约束,这意味着test_id不可以为null
                test_id int not null,
                test_name varchar(255),
                test_pass varchar(255),
                # 使用表级约束语法建立唯一约束, 指定两列组合不允许重复
                constraint test3_uk unique (test_name, test_pass)
            );

            # 也可以使用add或者modify时增加约束
            # 增加唯一约束
            alter table unique_test3
            add unique(test_name, test_pass);

            alter table unique_test3
            modify test_name varchar(255) unique;

            # 删除约束
            alter table unique_test3
            drop index test3_uk;

    PRIMARY KEY 约束:
        1. 主键约束相当于非空约束和唯一约束, 即主键约束的列既不允许出现重复值, 也不允许出现null 
        2. 每个表最多允许有一个主键, 但是这个主键约束可以由多列组合而成
        3. 也有列级约束语法和表级约束语法(多字段建立组合主键)

        例子:
            # 列级约束语法
            create table primary_test (
                # 建立主键约束
                test_id int PRIMARY KEY,
                test_name varchar(255)
            );

            # 表级约束语法