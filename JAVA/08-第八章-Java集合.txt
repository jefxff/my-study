1. Java集合概述
    说明: 
        1. Java集合类是一种特别有用的工具类, 可用于存储数量不等的对象, 并可以实现常用数据结构, 如队列,栈;
            集合类都在 java.util 包下, Java5后, 在java.util.concurrent 包下提供支持线程的集合类
        2. Java集合还可用于保存具有映射关系的关联数组
        3. Java集合分四种: Set(无序, 不可重复的集合), List(有序的, 重复的集合), Map(代表具有映射关系的集
            合), Queue(代表一种队列集合实现)
        4. Java的集合类主要由两个接口派生而出: Collection 和 Map , 他们是Java集合框架的根接口, 这两个接口
            包含一些子接口和实现类; Set和List和Queue接口是Collection接口派生的子接口
        5. 所有的Map实现类用于保存具有映射关系的数据(也就是关联数组), Map的实现类保存的都是 key-value 对, 
            也就是由 key 和 value 两个值组成, key 不可以重复, 而 value 可以重复
        6. 集合和数组的区别: 数组元素既可以是基本类型的值, 也可以是对象(实际上保存的是对象的引用变量); 而集
            合只能保存对象(实际上只是保存的对象的引用变量--记住)
    
    四种集合最常用的实现类;
        HashSet, TreeSet, ArrayList, ArrayDeque, LinkedList, HashMap, treeMap

    访问集合的元素:
        1. List集合元素直接通过索引来访问; 因为List是有序的集合
        2. Map集合的元素通过每项元素的key来访问其value; 因为Map集合的key值是不可重复的
        3. Set集合中的元素只能根据元素本身来访问; 因为Set集合的元素无序可重复

2. Collection 和 Iterator 接口
    说明:
        1. 由于 Collection 接口是 Set, List, Queue接口的付接口, 所以 Collection 接口定义的方法可用于操作
            Set, List, Queue集合
        2. 记住: 集合就像容器, 实现生活中容器的功能, 可添加对象, 删除对象, 清空对象, 判断容器是否为空等, 集
            合类就为这些功能提供了对应的方法

    Collection 接口定义的方法:
        1. boolean add(Object o)
            说明: 该方法用于向集合里添加一个元素, 如果集合对象被添加操作改变了(也就是添加成功), 就返回true 
        2. boolean addAll(Collection c)
            说明: 该方法把集合c里所有的元素添加到指定的集合里, 如果集合对象被添加操作该变了, 就返回true
        3. void clear()
            说明: 清空集合里的所有元素, 将集合的长度变为0
        4. boolean contains(Object o)
            说明: 返回集合里是否包含指定元素
        5. boolean ContainsAll(Collection c)
            说明: 返回集合里是否包含集合c里的所有元素
        6. boolean isEmpty()
            说明: 返回集合是否为空, 当集合长度为0时, 返回true, 否则返回false
        7. Iterator iterator()
            说明: 返回一个 Iterator对象, 用于遍历集合里的元素
        8. boolean remove(Object o)
            说明: 删除集合中指定元素o, 当集合中包含了一个或多个元素o时, 该方法只删除第一个符合条件的元素, 该
                方法将返回true
        9. boolean removeAll(Collection c)
            说明: 从集合中删除集合c里包含的所有元素(相当于调用该方法的结合减集合c), 如果删除了一个或一个以上
                的元素, 则该方法返回true
        10. boolean retainAll(Collection c)
            说明: 从集合中删除集合c里不包含的元素(相当于把调用该方法的集合变成该集合和集合c的交集), 如果操作
                改变了调用方法的集合, 则该方法返回true
        11. int size()
            说明: 该方法返回集合里的元素个数
        12. Object[] toArry()
            说明: 该方法把集合转换成一个数数组, 所有的集合元素变成对应的数组元素

    例子:
        // CollectionTest.java
        import java.util.ArrayList;
        import java.util.Collection;
        import java.util.HashSet;

        public class CollectionTest{
            public static void main(String[] args) {
                Collection c = new ArrayList();
                // 添加元素
                c.add("孙悟空");
                // 虽然集合里不能放基本类型, 但Java支持自动装箱
                c.add(6);
                System.out.println("c集合的元素个数为: " + c.size());
                // 删除指定元素
                c.remove(6);
                System.out.println("c集合的元素个数为: " + c.size());
                // 判断是否包含指定的字符串
                System.out.println("c集合是否包含\"孙悟空\"字符串: " + c.contains("孙悟空"));
                c.add("轻量级 Java EE 企业级应用实战");
                System.out.println("c集合的元素: " + c);

                Collection books = new HashSet();
                books.add("轻量级 Java EE 企业级应用实战");
                books.add("疯狂 Java 讲义");
                System.out.println("c集合是否包含books集合? " + c.containsAll(books));
                // 用c集合减去books集合的元素
                c.removeAll(books);
                System.out.println("c集合的元素: " + c);
                // 删除c集合的所有元素
                c.clear();
                System.out.println("c集合的元素: " + c);
                // 控制books集合里只剩下c集合里也包含的元素
                books.retainAll(c);
                System.out.println("books集合的元素: " + books);
            }
        }
        程序说明:
            1. 程序未使用泛型来限制集合里元素的种类, 编译会报警告
            2. 所有的 Collection 实现类都重写了 toString() 方法, 该方法可以一次性地输出集合中的所有元素

2.1 使用 Lambda 表达式遍历集合
    说明:
        1. Java8 为 Iterable 接口新增了一个 forEach(Consumer action)默认方法, 该方法所需的参数的类型是一
            个函数式接口, 而 Iterable 接口是 Collection 接口的父接口, 因此 Collection 接口也可以直接调用
            该方法
        2. 当程序调用 Iterable 的 forEach(Consumer action) 遍历集合元素时, 程序会依次将集合元素传给 
            Consumer 的 accept(T t) 方法 (该接口中唯一的抽象方法). 正因为 Consumer 是函数式接口, 因此可以
            使用Lambda表达式来遍历集合元素
        
    例子:
        // CollectionEach.java 
        import java.util.Collection;
        import java.util.HashSet;

        public class CollectionEach {
            public static void main(String[] args) {
                // 创建一个集合
                Collection books = new HashSet();
                books.add("java Note");
                books.add("Python Note");
                books.add("JavaScript Note");
                books.add("Css Note");
                // 调用 forEach()方法遍历
                books.forEach(obj -> System.out.println("迭代集合元素:" + obj));
            }
        }

2.2 使用Java8增强的 Iterator 遍历集合元素
    说明:
        1. Iterator 主要用于遍历(即迭代访问) Collection 集合中的元素, Iterator 对象也被称之为迭代器; 而 
            Collection 系列集合, Map系列集合主要用于盛装其他对象
        2. Iterator 接口隐藏了各种 Collection 实现类的底层细节, 向应用程序提供了遍历 Collection 集合元素
            的统一编程接口
    
    Iterator 接口里定义的方法:(例子1)
        1. boolean hasNext()
            说明: 如果被迭代的集合元素还没有被遍历完, 则该方法返回true
        2. Object next()
            说明: 返回集合里的下一个元素
        3. void remove()
            说明: 删除集合里的下一个元素
        4. void forEachRemaining(Consumer action)
            说明: 这是Java8为 Iterator 新增的默认方法, 该方法可使用Lambda表达式来遍历集合元素

    例子1:
        import java.util.Collection;
        import java.util.HashSet;
        import java.util.Iterator;
        public class IteratorTest{
            public static void main(String[] args){
                 // 创建一个集合
                Collection books = new HashSet();
                books.add("java Note");
                books.add("Python Note");
                books.add("JavaScript Note");
                books.add("Css Note");
                // 获取books集合对应的迭代器
                Iterator it = books.iterator();
                while (it.hasNext()){
                    // it.next()方法返回的数据类型是Object类型, 因此需要强制类型转换
                    String book = (String)it.next();
                    if(book.equals("Python Note")){
                        // 从集合中删除上一次 next() 方法返回的元素
                        it.remove();
                        // books.remove(book);  // ②
                    }
                    book = "测试字符串";   // ①
                }
                // out: [java Note, JavaScript Note, Css Note]
                System.out.println(books);
            }
        }
        程序说明:
            1. Iterator 仅用于遍历集合. Iterator 本身并不提供盛装对象的能力, 如果需要创建 Iterator 对象, 
                则必须有一个被迭代的集合, 没有集合的 Iterator 没有存在的价值
            2. Iterator 必须依附与 Collection 对象, 若有一个 Iterator 对象, 则必然有一个与之关联的 Collection
                对象, Iterator 提供了两个方法来迭代访问 Collection 集合里的元素, 并可通过 remove() 方法来
                删除集合中上一次next()方法放回的集合元素
            3. ①出的代码并没有改变books集合中的元素, 当使用Iterator 对集合元素进行迭代时, Iterator 并不是
                把集合元素本身传给了迭代变量, 而是把集合元素的值传给了迭代变量, 所以修改迭代变量的值对集合
                元素本身没有影响
            4. 当使用 Iterator 迭代访问 Collection 集合元素时, Collection 集合里的元素不能被改变, 只有通
                过 Iterator 的 remove() 方法删除上一次 next() 方法返回的集合元素才可以, 否则将引发异常

2.3 使用Lambda表达式遍历Iterator
    说明:
        1. Java8 为Iterator新增的一个 forEachRemaining(Consumer action) 方法, Consumer参数是函数式接口,
        2. 当程序调用 Iterator 的 forEachRemaining(Consumer action)遍历集合元素时, 程序会依次将集合元素
            传给 Consumer 的 accept(T t)方法(该接口中唯一的抽象方法)
    例子:
        public class IterctorEach{
            public static void main(String[] args){
                // 创建一个集合
                Collection books = new HashSet();
                books.add("java Note");
                books.add("Python Note");
                books.add("JavaScript Note");
                books.add("Css Note");
                // 获取books集合对应的迭代器
                Iterator it = books.iterator()
                // 使用Lambda表达式(目标类型是Consumer)来遍历集合元素
                it.forEachRemaining(obj -> System.out.println("迭代集合元素: " + obj));
            }
        }

2.4 使用 foreach 循环遍历集合元素
    例子:
        public class foreachTest{
            public static void main(String[] args){
                // 创建一个集合
                Collection books = new HashSet();
                books.add("java Note");
                books.add("Python Note");
                books.add("JavaScript Note");
                books.add("Css Note");
                for(Object obj : books){
                    // 此处的book变量也不是集合元素本身
                    // 将Object类型的变量强转为String类型
                    String book = (String)obj;
                    System.out.println(book);
                    if(book.equals("Python Note")){
                        // 下面的代码引发异常
                        books.remove(book);   // ①
                    }
                }
                System.out.println(books);
            }
        }
        程序说明:
            1. foreach循环中的迭代变量也不是集合元素本身, 系统只是依次把集合元素的值赋给迭代变量. 因此在
                foreach循环中修改迭代变量的值也没有实际意义
            2. 当使用 foreach 循环迭代访问集合元素时, 该集合也不能被改变, 否则将引发异常, 如①处

2.5 使用 Java8 新增的 Predicate 操作集合
    说明:
        1. removeIf(Predicate filter) 方法支持批量删除符合 filter 条件的所有元素; Predicate 也是函数式
            接口, 也可以使用Lambda表达式作为参数
    
    例子:
        import java.util.Collection;
        import java.util.HashSet;
        import java.util.function.Predicate;

        public class PredicateTest {
            public static void main(String[] args) {
                // 创建一个集合
                Collection books = new HashSet();
                books.add("java Note");
                books.add("Python Note");
                books.add("JavaScript Note");
                books.add("Css Note");

                // 使用Lambda表达式(目标类型是Predicate)过滤集合
                books.removeIf(ele -> ((String)ele).length() > 12);
                System.out.println(books);   // out: [java Note, Python Note, Css Note]
                // 统计书名中包含"Python"子串的图书数量
                System.out.println(calAll(books, ele -> ((String)ele).contains("Python")));  // out: 1
                // 统计书名中包含"Css"子串的图书数量
                System.out.println(calAll(books, ele -> ((String)ele).contains("Css")));  // out: 1
                // 统计书名字符串长度大于10的图书数量
                System.out.println(calAll(books, ele -> ((String)ele).length() > 10));  // out: 1
            }

            public static int calAll(Collection books, Predicate p) {
                int total = 0;
                for (Object obj : books){
                    // 使用 Predicate 的 test() 方法判断该对象是否满足 Predicate 指定条件
                    if (p.test(obj)){
                        total ++;
                    }
                }
                return total;
            }
        }
        程序说明:
            1. 上述程序先定义了一个calAll()方法, 该方法将会使用 Predicate 判断每个集合元素是否符合特定条件
                该条件将通过 Predicate 参数动态传入, 上述四行输出行代码传入了四个Lambda表达式(目标类型都
                是Predicate), 这样 calAll()方法就只会统计满足Predicate条件的图书