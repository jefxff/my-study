Git 安装和使用
1. 目的
	1.1 通过Git管理Github托管项目代码

2. 下载安装
	2.1 git官网下载安装
	2.2 安装完成后在桌面单击右键看是否安装成功(在桌面单机右键，看是否会出现[git bush here]；如果出现，说明git安装成功)

3. Git基础设置
	3.1 设置用户名
		git config --global user.name 'XXXXXX'
	3.2 设置用户邮箱
		git config --global user.email 'XXXXXX@outlook.com'	
	3.3 查看设置
		git config --list

4. Git工作区域(4.3--->4.2--->4.1)
	4.1 Git Repository(Git 仓库)
		----->最终确定的文件保存到仓库，成为一个新的版本，并且对他人可见
	
	4.2 暂存区
		----->暂存已经修改的文件最后统一提交到git仓库中

	4.3 工作区（Working Directory）
		----->添加、编辑、修改文件等动作

5. 向仓库中添加文件流程（最好学习命令形式提交文件---Git Bush Here）
	5.1 Git命令
		5.1.1 git status					查看当前文件状况（在工作区域还是在暂存区）
		5.1.2 git add (files name)			将(files name)从工作去提交到暂存区
		5.1.3 git commit -m "提交描述"		将(files name)从暂存区提交到Git仓库

6. Git 初始化及仓库的建立和操作
	6.1 基本信息设置
		6.1.1设置用户名
		git config --global user.name 'XXXXXX'
		6.1.2 设置用户邮箱
		git config --global user.email 'XXXXXX@outlook.com'

	6.2 初始化一个新的 Git 仓库
		6.2.1 创建文件夹 	$:mkdir (file name)	--->例如：my-study
		6.2.2 在文件内初始化 Git （创建 Git 仓库）
			cd my-study
			git init 	(这条命令生成一个隐藏的 .git 文件夹，用来存储仓库所有信息)

	6.3 向仓库中添加文件
		6.3.1 用 $:touch 或者 vim 命令创建文件（需要添加的程序代码文件、或者.txt文件，等等）
		6.3.2 用 $:git add (files name) 将文件从 工作区 添加到 暂存区
		6.3.3 用 $:git commit -m 'add test.py' 将文件提交到Git本地仓库

	6.4 修改文件
		6.4.1 修改文件 利用 vi\vim 等编辑器修改文件
		6.4.2 用 $:git add (files name) 将文件从 工作区 添加到 暂存区
		6.4.3 用 $:git commit -m '这里是添加说明的'	将文件从暂存区提交到Git本地仓库

	6.5 删除文件
		（#这是删除文件夹中的文件） $:rm -rf test.py  通过Linux强制删除命令，直接删除文件）
		6.5.1 删除文件
			rm test.py
		6.5.2 从Git中删除文件
			git rm test.py
		6.5.3 提交操作
			git commit -m "说明本次删除原因"		

7. Git 管理远程仓库
	7.1 使用远程仓库的目的
		7.1.1 作用：备份，实现多人的代码共享集中化管理
	7.2 将本地代码提交到远程仓库
		(首先clone Github 的远程仓库到本地，然后在本地的仓库进行6.3的操作，再通过 git push 将文
		件提交到 Github 上。)
		7.2.1 用 $:touch 或者 vim 命令创建文件
		7.2.2 用 $:git add (files name) 将文件添加到暂存区
		7.2.3 用 $:git commit -m 'add test.py'
		7.2.4 用 $:git push 	将本地仓库提交到远程

	7.3 Git 克隆操作
		7.3.1 目的
			将远程仓库（GitHub对应的项目）复制到本地
		7.3.2 代码
			git clone https://github.com/jefxff/my-study.git	

	7.4 解决 git push 错误
		The requested URL returned error: 403 Forbidden while accessing
		答案：私有项目，没有权限，输入用户名密码，或者远程地址采用这种类型

		vi .git/config

		# 将
		[remote "origin"]
			url = https://github.com/用户名/仓库名.git
		修改为：
		[remote "origin"]
			url = https://用户名：密码@github.com/用户名/仓库名.git	

8. Git命令
	8.1 Git基本命令
		8.1.1 git help --web log   (网页查看历史版本文档)
		8.1.2 git mv readme readme.md   (将readme重命名为readme.md)
		8.1.3 git --oneline --all -n4 --graph
			  其中： --oneline (单行显示)
			  		 --all  (显示所有分支)
			  		 -n4    (显示4行)
			  		 --garph   (带分支的演变历史)
		8.1.4 gitk (图形界面工具查看版本历史，其中颜色相同的表示同一个commit)
		8.1.5 git config --local --list   （查看配置信息）	  		 

9. 版本回滚
	9.1 通过命令 git log 查看历史版本提交记录
	9.2 根据版本commit值可以进行回滚 命令：$ git reset --hard 版本号
	9.3 如果要再回到最新版本 命令：$ git reflog

10. 忽略文件
	10.1 我们无需让Git跟踪的目录，在Git目录下创建 .gitignore 的特殊文件（这个文件以英文
		的句点打头，并没有扩展名）并在文件中添加不需要Git跟踪的文件的文件名，
		例如：（__pycache__ 文件不需要Git跟踪）就在 .gitignore 文件中添加如下内容：
			__pycache__/ 
	10.2 如果你使用的是Python 2.7， 请将这行内容改为*.pyc 。Python 2.7不会创建目录
		__pycache__，它将每个.pyc文件都存储在相应.py文件所在的目录中。其中的星号让Git
		忽略所有扩展名为.pyc的文件。	
			
Git branch
1.分支学习：branch称之为分支，默认只有一个分支名为master的分支。一般开发新功能时
	会在分支dev上进行，开发完毕之后再合并到master分支。		
2. 命令
	$ git branch 分支名 			#创建分支
	$ git checkout 分支名		#切换分支
	$ git checkout -b 分支名  	#或者使用合并命令：（表示创建并切换到新创建的分支）
	$ git merge 分支名  			#在切换回到master分支上面之后执行此命令，进行合并分支
	注：$ git branch -av  		#此命令表示列出所有的分支，并且会在当前所在的分支前加*
	$ git branch -m 分支名 		#创建并切换到指定分支
	$ git branch 				#查看所有分支
	$ git branch -d 分支名 		#删除分支

Git stash
1. stash 用于将工作区发生变化的所有文件获取临时存储在“某个地方”，将工作区还原当前
	版本未操作前的状态；stash还可以将临时存储在“某个地方”的文件再次拿回到工作区。
2. 命令
	$ git stash 		#将当前工作区所有修改过的内容存储到“某个地方”，将工作区还
	 					原到当前版本未修改过的状态
	$ git stash list 	#查看“某个地方”存储的所有记录
	$ git stash clear 	#清空“某个地方”
	$ git stash pop 	#再将某个地方的代码拿回来继续开发		
	$ git stash apply 	#编号，将指定的编号记录从“某个地方”重新拿到工作区（可能有冲突）
	$ git stash daop 	#编号，删除指定编号的记录
	
Github
1. 命令
	1.1将开发完毕的代码推送到GitHub
		$ git remote add origin https://github.com/jefxff/my-study.git #为地址起一个别名origin
		$ git push origin master  #将本地master分支内容以及版本信息推送到Github
		$ git push origin dev #将本地dev分支内容以及版本信息推送到GitHub

	1.2新的本地Git，需要将代码从GitHub中获取并继续开发，实现不同办公地点同步
		$ git clone https://github.com/jefxff/my-study.git   #将项目从Github中获取（默认获取的
			是master分支，如果需要在其他分支工作，需要创建并切换分支）
		$ git branch dev origin/dev  #创建dev分支且和远程dev分支同步
		$ git push origin dev  #提交dev分支内容到远程GitHub托管仓库的dev

	1.3实际情形：在公司开发的代码提交到GitHub，需要再家里继续开发，就需要去github拉取最新的代码
		$ git checkout dev  #切换分支	
		$ git pull origin dev  #从远程Github仓库获取dev分支的最新内容，并合并到本地
		$ vim files / $ git add . / $ git commit -m "开发功能"（再家进行开发并提交）

	1.4 实际情形：再家更新了部分功能，在公司需要将最新功能从GitHub中拉取，并继续开发
		$ git checkout dev #切换分支
		$ git fetch origin dev 	 #从GitHub中获取dev分支最新内容到版本库的分支
		$ git merge oirgin/dev   #将版本库的分支内容合并到工作区
		$ vim files / $ git add . / $ git commit -m "开发功能"（再公司开发并提交）

	1.5将Git和GitHub结合使用做到避免电脑损坏造成数据丢失以及多地开发的问题，上文执行过程中执行 
		【git pull origin 分支】命令等同于【git fetch origin 分支】+ 【git merge origin/分支】，
		并且在执行过程中可能会出现冲突，原因是由于本地代码和获取的最新代码有重合部分，那么就需要自己
		手动解决冲突然后再继续开发。

	1.6详细查看 http://www.cnblogs.com/wupeiqi/p/7295372.html 武沛齐的博客	
	
Github协同开发
	创建程序
		用户A创建程序，提交到GitHub
		用户B克隆项目
		用户C克隆项目
	开发功能
		用户A开发功能1
		用户B开发功能2
		用户C开发功能3
	提交
		用户A提交功能1，并push（A用户手速快，先提交。）
		用户B提交功能2，无法push，因为GitHub上已经有其他人提交的新代码。
		[解决方法]：从GitHub上获取最新代码并合并到本地，提交自己开发的功能2。
		用户C提交功能3，无法push，无法提交，因为GitHub上已经有其他人提交的新代码。
		[解决方法]：从GitHub上获取最新代码并合并到本地，提交自己开发的功能3。
	获取最新代码
		用户A获取最新代码
		用户B获取最新代码
		用户C获取最新代码
	注意：上述中括号中的解决办法可以有三种方式操作，	三者都可以完成合并并提交新功能，但是日志记录
		会有差异，如：前两者版本记录中会出现合并，而第三种可以保证版本记录干净整洁。
		先 git pull origin master   然后 git push origin master
		先 git fetch origin master  然后 git merge origin/master   再 git push origin master
